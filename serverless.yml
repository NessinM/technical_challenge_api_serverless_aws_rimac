service: medical-appointment

custom:
  dynamoDbTable: AppointmentsTable

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    APPOINTMENTS_TABLE: ${self:custom.dynamoDbTable}
  deploymentBucket:
    name: bucket-serverless-medical-appointment
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:Scan
      Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.dynamoDbTable}
    - Effect: Allow
      Action:
        - sns:Publish
        - sns:Subscribe
      Resource: arn:aws:sns:${aws:region}:${aws:accountId}:AppointmentTopic
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
      Resource:
        - arn:aws:sqs:${aws:region}:${aws:accountId}:SqsPeQueue
        - arn:aws:sqs:${aws:region}:${aws:accountId}:SqsClQueue
        - arn:aws:sqs:${aws:region}:${aws:accountId}:AppointmentStatusUpdateQueue
    - Effect: Allow
      Action:
        - events:PutEvents
        - events:DescribeRule
        - events:ListTargetsByRule
      Resource: arn:aws:events:${aws:region}:${aws:accountId}:rule/AppointmentCompletedRule
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: arn:aws:lambda:${aws:region}:${aws:accountId}:function:*
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/*

plugins:
  - serverless-dotenv-plugin

functions:
  createAppointment:
    handler: src/interfaces/controllers/appointmentController.createHandler
    events:
      - http:
          path: appointments
          method: post
          cors: true
    environment:
      APPOINTMENT_TOPIC_ARN:
        Fn::GetAtt:
          - AppointmentTopic
          - TopicArn
      DYNAMODB_TABLE: ${self:custom.dynamoDbTable}
    dependsOn:
      - AppointmentTopic

  getAppointments:
    handler: src/infrastructure/aws/appointments/getAppointmentsByInsureIdHandler.get
    events:
      - http:
          path: appointments/{insuredId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                insuredId: true

  appointment_pe:
    handler: src/infrastructure/aws/appointments/appointmentPeHandler.processAppointmentPe
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SqsPeQueue
              - Arn
          batchSize: 5
    environment:
      APPOINTMENT_EVENT_TOPIC_ARN:
        Fn::GetAtt:
          - AppointmentTopic
          - TopicArn
      RDS_HOST_PE: ${env:RDS_HOST_PE}
      RDS_USER_PE: ${env:RDS_USER_PE}
      RDS_PASSWORD_PE: ${env:RDS_PASSWORD_PE}
      RDS_DATABASE_PE: ${env:RDS_DATABASE_PE}
    dependsOn:
      - SqsPeQueue
      - AppointmentTopic

  appointment_cl:
    handler: src/infrastructure/aws/appointments/appointmentClHandler.processAppointmentCl
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SqsClQueue
              - Arn
          batchSize: 5
    environment:
      APPOINTMENT_EVENT_TOPIC_ARN:
        Fn::GetAtt:
          - AppointmentTopic
          - TopicArn
      RDS_HOST_CL: ${env:RDS_HOST_CL}
      RDS_USER_CL: ${env:RDS_USER_CL}
      RDS_PASSWORD_CL: ${env:RDS_PASSWORD_CL}
      RDS_DATABASE_CL: ${env:RDS_DATABASE_CL}
    dependsOn:
      - SqsClQueue
      - AppointmentTopic

  statusUpdater:
    handler: src/infrastructure/aws/status/statusUpdaterHandler.updateStatus
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - AppointmentStatusUpdateQueue
              - Arn
          batchSize: 5
    dependsOn:
      - AppointmentStatusUpdateQueue

resources:
  Resources:
    # Dead Letter Queues
    SqsPeDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQS_PE_DLQ

    SqsClDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQS_CL_DLQ

    AppointmentStatusDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: AppointmentStatusUpdate_DLQ

    # Main Queues
    SqsPeQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQS_PE
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt SqsPeDLQ.Arn
          maxReceiveCount: 5

    SqsClQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQS_CL
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt SqsClDLQ.Arn
          maxReceiveCount: 5

    AppointmentStatusUpdateQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: AppointmentStatusUpdateQueue
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt AppointmentStatusDLQ.Arn
          maxReceiveCount: 5

    # SNS Topic
    AppointmentTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: AppointmentTopic

    # SNS Subscriptions
    AppointmentTopicSubscriptionPE:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt SqsPeQueue.Arn
        TopicArn: !Ref AppointmentTopic
        FilterPolicy:
          countryISO: ["PE"]

    AppointmentTopicSubscriptionCL:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt SqsClQueue.Arn
        TopicArn: !Ref AppointmentTopic
        FilterPolicy:
          countryISO: ["CL"]

    # Queue Policies
    PermissionToSendToSQS:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref AppointmentStatusUpdateQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: events.amazonaws.com
              Action: "sqs:SendMessage"
              Resource: !GetAtt AppointmentStatusUpdateQueue.Arn

    SqsPeQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref SqsPeQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action:
                - sqs:SendMessage
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
              Resource: !GetAtt SqsPeQueue.Arn

    SqsClQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref SqsClQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action:
                - sqs:SendMessage
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
              Resource: !GetAtt SqsClQueue.Arn

    # EventBridge Rule
    AppointmentCompletedRule:
      Type: AWS::Events::Rule
      Properties:
        Name: AppointmentCompletedRule
        EventPattern:
          source:
            - "appointment.service"
          detail-type:
            - "appointment.completed"
        Targets:
          - Arn: !GetAtt AppointmentStatusUpdateQueue.Arn
            Id: "SendToStatusQueue"

    # DynamoDB Table
    AppointmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoDbTable}
        AttributeDefinitions:
          - AttributeName: scheduleId
            AttributeType: N
        KeySchema:
          - AttributeName: scheduleId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    # Logs (opcional, si quieres controlar retenci√≥n)
    LogGroupCreateAppointment:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-createAppointment
        RetentionInDays: 14

package:
  individually: true
  patterns:
    - "!node_modules/**"
    - "!tests/**"
    - "!docs/**"
    - "!*.md"
    - "!*.log"
